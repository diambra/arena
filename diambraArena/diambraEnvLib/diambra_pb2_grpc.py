# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import diambra_pb2 as diambra__pb2


class EnvServerStub(object):
    """The DIAMBRA service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendEnvSettings = channel.unary_unary(
                '/diambra.EnvServer/SendEnvSettings',
                request_serializer=diambra__pb2.EnvSettings.SerializeToString,
                response_deserializer=diambra__pb2.EnvInfoAndIntData.FromString,
                )
        self.CallReset = channel.unary_unary(
                '/diambra.EnvServer/CallReset',
                request_serializer=diambra__pb2.Empty.SerializeToString,
                response_deserializer=diambra__pb2.Obs.FromString,
                )
        self.CallStep1P = channel.unary_unary(
                '/diambra.EnvServer/CallStep1P',
                request_serializer=diambra__pb2.Command.SerializeToString,
                response_deserializer=diambra__pb2.Obs.FromString,
                )
        self.CallStep2P = channel.unary_unary(
                '/diambra.EnvServer/CallStep2P',
                request_serializer=diambra__pb2.Command.SerializeToString,
                response_deserializer=diambra__pb2.Obs.FromString,
                )
        self.CallClose = channel.unary_unary(
                '/diambra.EnvServer/CallClose',
                request_serializer=diambra__pb2.Empty.SerializeToString,
                response_deserializer=diambra__pb2.Empty.FromString,
                )


class EnvServerServicer(object):
    """The DIAMBRA service definition.
    """

    def SendEnvSettings(self, request, context):
        """Sends environment settings, receives back environment info and int data vars
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CallReset(self, request, context):
        """Call reset method, receives observation (containing also player ID in this case)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CallStep1P(self, request, context):
        """Call step method (1P), receives observation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CallStep2P(self, request, context):
        """Call step method (2P), receives observation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CallClose(self, request, context):
        """Call close method, receives observation placeholder
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EnvServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendEnvSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.SendEnvSettings,
                    request_deserializer=diambra__pb2.EnvSettings.FromString,
                    response_serializer=diambra__pb2.EnvInfoAndIntData.SerializeToString,
            ),
            'CallReset': grpc.unary_unary_rpc_method_handler(
                    servicer.CallReset,
                    request_deserializer=diambra__pb2.Empty.FromString,
                    response_serializer=diambra__pb2.Obs.SerializeToString,
            ),
            'CallStep1P': grpc.unary_unary_rpc_method_handler(
                    servicer.CallStep1P,
                    request_deserializer=diambra__pb2.Command.FromString,
                    response_serializer=diambra__pb2.Obs.SerializeToString,
            ),
            'CallStep2P': grpc.unary_unary_rpc_method_handler(
                    servicer.CallStep2P,
                    request_deserializer=diambra__pb2.Command.FromString,
                    response_serializer=diambra__pb2.Obs.SerializeToString,
            ),
            'CallClose': grpc.unary_unary_rpc_method_handler(
                    servicer.CallClose,
                    request_deserializer=diambra__pb2.Empty.FromString,
                    response_serializer=diambra__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'diambra.EnvServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EnvServer(object):
    """The DIAMBRA service definition.
    """

    @staticmethod
    def SendEnvSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/diambra.EnvServer/SendEnvSettings',
            diambra__pb2.EnvSettings.SerializeToString,
            diambra__pb2.EnvInfoAndIntData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CallReset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/diambra.EnvServer/CallReset',
            diambra__pb2.Empty.SerializeToString,
            diambra__pb2.Obs.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CallStep1P(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/diambra.EnvServer/CallStep1P',
            diambra__pb2.Command.SerializeToString,
            diambra__pb2.Obs.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CallStep2P(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/diambra.EnvServer/CallStep2P',
            diambra__pb2.Command.SerializeToString,
            diambra__pb2.Obs.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CallClose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/diambra.EnvServer/CallClose',
            diambra__pb2.Empty.SerializeToString,
            diambra__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
